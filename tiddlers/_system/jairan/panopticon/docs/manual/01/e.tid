caption: View templates
created: 20231023081852185
modified: 20231102141743144
tags: exported
title: $:/jairan/panopticon/docs/manual/01/e
type: text/vnd.tiddlywiki

!! Defining category templates

The ''info section'' content is generated by a widget inside `$:/jaimeranchal/panopticon/ui/body`. This widget reads the tags of the currentTiddler and loads the configuration accordingly.

<<alert type:"info" src:"""
This plugins makes use of the //filter cascade// in [[$:/core/ui/ViewTemplate/body]] to render body content. The tiddler [[$:/config/ViewTemplateBodyFilters/panopticon-categories]], tagged <<tag-pill "$:/tags/ViewTemplateBodyFilter">>, contains this filter (the macro `<category>` replace all categories defined in [[Data/categories]]):

```
[tag<category>] :then[[$:/jaimeranchal/panopticon/ui/body]]
```
""">>

Each tiddler tagged with a //category// will have a slightly different layout than regular tiddlers:

* ''Header'': caption and icon; special fields, actions buttons...
* ''Body'': transcludes the tiddler //text// field.
* ''Side'': Custom fields summary
* ''Footer''

Aside from //body//, section content is customisable with a //template// defined in [[Data/templates]]. If not, a default set of options is provided (see [[the info widget|$:/jairan/panopticon/docs/manual/03/a]])

A sample of template definition:

```json
[
  {
    "name": "Category_name",
    "header": {
      "display": {
        "hidden": false,
        "position":"start|end|center",
        "align":"left|right|center",
        "background_color": "#282828",
        "separator":true, // show line between sections
        "fieldFormat": "badge|table|text"
      },
      "fields":[
        "field_1",
        "field_2",
        "..."
      ],
      "actions":[
        // list action methods: "addIssue" "changeStatus"...
      ]
    },
    "side": {
      "display":{
        "hidden": false,
        "position":"start|end|center",
        "width":"1/3|45%|340px",
        "separator":true, // show line between sections
        "groupFormat": "list|tabs" // default: list
      },
      "groups":[
        {
          "label":"group_label",
          "fields": ["field1","field2"],
          "actions":["action1"],
          "format":"badge|table|list"
        }
      ],
    },
    "footer": {
      "display":{
        "hidden": false,
        "position":"start|end|center",
        "width":"1/3|45%|340px",
        "separator":true, // show line between sections
        "groupFormat": "list|tabs" // default: tabs
      },
      "groups":[
        {
          "label":"group_label",
          "fields": ["field1","field2"],
          "actions":["action1"],
          "format":"badge|table|list"
        }
      ],
    },
    "has": {
      "section":"header|side|body|footer",
      "display":"list|tabs|table"
    },
    "parents": {
      "section":"header|side|body|footer",
      "display":"list|tabs|table"
    }
  }
]
```

Using these parameters the widget will display the information. Fields are read from [[Data/categories]].

* For each value in the `parents` property it will add a table with parent data
* If the `has` or `parents` properties are not empty:
** it will search for related tiddlers (based on the defined //relationship// type in [[Data/categories]], defaulting to `prefix`).
** Show them either as a list or grid. In those cases, the macro will read the template from `Data/templates/#/listTemplate` (or `gridTemplate`). 
** Show a ''header'' with a title, number of items and a //new here// button.
